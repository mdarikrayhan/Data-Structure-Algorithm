/***************************************************/
/*            Author : Md. Arik Rayhan             */
/*        Github : github.com/mdarikrayhan         */
/***************************************************/
#include <bits/stdc++.h>
using namespace std;
const char nl = '\n';
int main()
{
    int n=1000000000;
    vector<bool> is_prime(n + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= n; i++)
    /*
    এখানে n=২৫ হলে,sqrt(n)=5 পর্যন্ত চেক করলেই সব composite নাম্বার চেক করা হবে
    ২ কভার করবে = ৪,৬,৮,১০,১২,১৪,১৬,১৮,২০,২২,২৪
    ৩ কভার করবে = ৯,১২,১৫,১৮,২১,২৪
    ৪ কভার করবে = ১৬,২০,২৪
    ৫ কভার করবে = ২৫
    */
    {
        if (is_prime[i])
        {
            for (int j = i * i; j <= n; j += i)
                        /*  
                এখানে i^2 থেকে শুরু করবে , কারণ 
                i এর আগে যে প্রাইম নাম্বার থাকবে(i-1) সেটা 
                i পর্যন্ত composite number cover করবে । 
                কারণ কোন নাম্বার প্রাইম কিনা সেটা চেক করার জন্য 
                তার sqrt পর্যন্ত চেক করলেই হয় । এখানে তার opposite হবে । 
                ২ ,৩,৪,৫ এর উদাহরণ নেওয়া যায় যখন n=২৫। এখানে ,
                ২ কভার করবে = ৪,৬,৮,১০,১২,১৪,১৬,১৮,২০,২২,২৪,২৬,২৮,৩০,৩২,৩৪,৩৬,৩৮,৪০
                ৩ কভার করবে = ৯,১২,১৫,১৮,২১,২৪,২৭,৩০,৩৩,৩৬,৩৯
                ৪ কভার করবে = ১৬,২০,২৪
                ৫ কভার করবে = ২৫,৩০,৩৫,৪০
                এখানে দেখা যায় এ 
                ৩ এর আগের সব composite ২ কভার করে , আর 
                ৪ এর আগের সব composite ২,৩ কভার করে , আর
                ৫ এর আগের সব composite ২,৩,৪ কভার করে , আর

                j এর মান ১ করে বাড়বে আর i এর সাথে গুন হবে।
                */{
                is_prime[j] = false;}
        }
    }
    return 0;
}
/*
Number of data              Time(ms)
1                             0.001
10                            0.003
100                           0.007
1000                          0.075
10000                         0.650
100000                        6.791
1000000                      57.975
10000000                    497.786
100000000                  5204.380
1000000000                64579.900
*/ 